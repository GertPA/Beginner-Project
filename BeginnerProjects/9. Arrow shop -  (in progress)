using System.Reflection.Metadata.Ecma335;
using System.Runtime.Serialization;
using System.Security.Cryptography.X509Certificates;

//this will run it 
Arrow thisShit = new Arrow();
Console.WriteLine(thisShit);


//Arrowheads >  steel - 10 , wood - 3 , obsidian - 5
// shaft > 60 to 100 cm  | 0.05 per cm (if my calc is correct 60= 3 so userInput * 0.05 double check it) -- can be a tuple or an array with limits ,,, idk figure it out 
// fleching >  plastic - 10, turkey-5 ,goose-3


public enum Arrowheads:int
{
    steel = 10,
    wood = 3,
    obsidian = 5
}

public enum Fleching:int
{
    plastic = 10,
    TurkeyFeathers = 5,
    GooseFeathers = 3
}
class Arrow
{
    public int shaft;
    bool reask = true;
    public int userShaftChoice;


    public Arrow()
    {
        Console.WriteLine("\tHellow and welcome to the shop \n\tpress enter to continue");//rewrite - priority D
        Console.ReadLine();

        Console.WriteLine("pick your arrow heads : \n1.Steel \n2.Wood \n3.Obsidian"); //can you use enums here ? - â†“ 
        int userArrowHeadChoice = Convert.ToInt16(Console.ReadLine());


        while (reask)
        {
            Console.WriteLine("pick your shaft size (min= 60 , max = 100)");   //rewrite - priority D
            int userShaftChoice = Convert.ToInt16(Console.ReadLine());
            if (userShaftChoice >= 60 && userShaftChoice <= 100)
            {

                 Console.WriteLine($"Total price: {(float)ShaftCalculating(userShaftChoice)}"); 
                reask = false;
            }
            else
            {
                Console.WriteLine("Pls pick something between 60 and 100"); //rewrite - priority D

            }

        }
        ;

        Console.WriteLine("pick your arrow heads : \n1.Plastic \n2.Turkey Feathers \n3.Goose Feathers");
        int userFlechingChoice = Convert.ToInt16(Console.ReadLine());
    }

    public void userSwitchChoice(int userinput)
    {

    }
    // public void GetCost(int arrowUser, int flechingUser)//calculate total arrow price  | you  can combine the other method too ,,, 
    // {
    //     int totalPrice=0;
    //     switch (arrowUser)
    //     { //this doest work ... but the logic stends 
    //         case 1:
    //             { int yes = (int)Arrowheads.steel + totalPrice; }
    //             break;

    //         case 2:
    //             { int yes = (int)Arrowheads.wood + totalPrice; }
    //             break;


    //         case 3:
    //             { int yes = (int)Arrowheads.obsidian + totalPrice; }
    //             break;

    //         default:
    //             Console.WriteLine("invalid input");
    //             break;
    //     }

    //     switch (flechingUser)
    //     {
    //         case 1:
    //             { int yes = (int)Fleching.plastic + totalPrice; }
    //             break;

    //         case 2:
    //             { int yes = (int)Fleching.TurkeyFeathers + totalPrice; }
    //             break;

    //         case 3:
    //             { int yes = (int)Fleching.GooseFeathers + totalPrice; }
    //             break;

    //         default:
    //             Console.WriteLine("invalid input");
    //             break;
    //     }


    // }

    public double ShaftCalculating(double userChoice)
    {
        double defaultSize = 60;
        double cosetDiff = 0.05;

        if (userChoice == null) 
        {
          double finalCost = defaultSize * cosetDiff; 
          return finalCost;
        }
        else
        {
          double finalCost = userChoice * cosetDiff;
          return finalCost;
        }
    }

}
